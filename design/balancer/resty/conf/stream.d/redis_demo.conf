lua_shared_dict consul_list 10m;
init_worker_by_lua_block {
    ngx.log(ngx.ERR, "current worker inited: "..ngx.worker.id())
    local cjson = require("cjson")
    local delay = 3  -- in seconds
    local new_timer = ngx.timer.at
    local log = ngx.log
    local ERR = ngx.ERR
    local check
    check = function(premature)
        -- do check
        -- log(ERR, "do check redis config")
        local resolver = require "resty.dns.resolver"
        local r, err = resolver:new{
            nameservers = {{"172.17.50.199", 8600} },
            retrans = 5,  -- 5 retransmissions on receive timeout
            timeout = 2000,  -- 2 sec
        }

        if not r then
            log(ERR, "failed to instantiate the resolver: "..err)
            return
        end

        local answers, err, tries = r:query("redis.service.yunlu_office.consul", {qtype = r.TYPE_SRV, additional_section = true}, {})
        if not answers then
            log(ERR, "failed to query the DNS server: "..err)
            log(ERR, "retry historie:\n  "..table.concat(tries, "\n  "))
            return
        end

        if answers.errcode then
            log(ERR, "server returned error code: "..answers.errcode..
                    ": "..answers.errstr)
        end

        local upstreams = {}
        for i, ans in ipairs(answers) do
            table.insert(upstreams, ans)
        end
        ngx.shared.consul_list:set("redis", cjson.encode(upstreams))

        local ok, err = new_timer(delay, check)
        if not ok then
            log(ERR, "failed to create timer: "..err)
            return
        end
    end
    -- only start timer for worker 0 to prevent multi process to access shared.dict
    if 0 == ngx.worker.id() then
        local ok, err = new_timer(delay, check)
        if not ok then
            log(ERR, "failed to create timer: ", err)
            return
        end
    end
 }

upstream redis_backend {
    server 0.0.0.1:6379;   # just an invalid address as a place holder

    balancer_by_lua_block {
        local balancer = require "ngx.balancer"
        local cjson = require("cjson")
        local up_str = ngx.shared.consul_list:get("redis")
        ngx.log(ngx.ERR, "current ans is "..up_str)
        local upstreams = cjson.decode(ngx.shared.consul_list:get("redis"))
        local host = nil
        local port = 6379

        for i, ans in ipairs(upstreams) do
            if ans.address ~= nil then
                host = ans.address
                break
            end
        end

        local ok, err = balancer.set_current_peer(host, port)
        if not ok then
            ngx.log(ngx.ERR, "failed to set the current peer: ", err)
            return ngx.exit(ngx.ERR)
        end
    }
}

server {
    # this is the real entry point
    listen 6379;
    proxy_connect_timeout 1s;
    proxy_timeout 3s;
    proxy_pass redis_backend;
    access_log logs/access_redis.log  proxy;
}
