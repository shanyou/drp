# stream for redis
upstream backend {
    server 0.0.0.1:6379;   # just an invalid address as a place holder

    balancer_by_lua_block {
        local balancer = require "ngx.balancer"
        local host = "127.0.0.1"
        local port = 8080

        local ok, err = balancer.set_current_peer(host, port)
        if not ok then
            ngx.log(ngx.ERR, "failed to set the current peer: ", err)
            return ngx.exit(ngx.ERR)
        end
    }
}

server {
    # this is the real entry point
    listen 10000;
    proxy_connect_timeout 1s;
    proxy_timeout 3s;
    proxy_pass backend;
    access_log logs/access_tcp_10000.log  proxy;
}

server {
    # this server is just for mocking up a backend peer here...
    listen 127.0.0.1:8080;
    access_log logs/access_tcp_8080.log  proxy;
    content_by_lua_block {
        local sock = assert(ngx.req.socket(true))
        local data = sock:receive()  -- read a line from downstream
        ngx.flush(true)
        if data == "thunder" then
            ngx.print("flash!")  -- output data
        else
            ngx.print("boom!")
        end
        ngx.print("the end...")

    }
}
